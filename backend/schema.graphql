### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Group {
  id: Int!
  lists: [List!]!
  name: String!
  users: [User!]!
}

input GroupCreateInput {
  name: String!
}

input GroupDeleteInput {
  id: Int!
}

input GroupListCreationInput {
  groupId: Int!
  name: String!
}

input GroupUpdateInput {
  id: Int!
  name: String!
}

enum ImperialUnit {
  CUP
  FL_OZ
  GAL
  LB
  OZ
  PT
  QT
}

input IngredientCreationInput {
  amount: Float! = 1
  category: ItemCategory! = NONE
  description: String
  listId: Int!
  name: String!
}

type Item {
  amount: Float!
  category: String
  description: String!
  iconUrl: String
  id: Int!
  imperialUnit: String
  list: List
  metricUnit: String
  name: String!
}

enum ItemCategory {
  BABY_CARE
  BAKERY
  BEVERAGES
  CANNED_GOODS
  CLEANING_SUPPLIES
  DAIRY
  FROZEN_FOODS
  GROCERIES
  HEALTH_WELLNESS
  HOUSEHOLD_ITEMS
  MEAT_POULTRY
  NONE
  PERSONAL_CARE
  PET_SUPPLIES
  PRODUCE
  SNACKS
}

type List {
  group: Group
  id: Int!
  items: [Item!]!
  name: String!
  user: User
}

enum MetricUnit {
  CL
  GRAM
  KG
  L
  ML
}

type Mutation {
  addListForUser(data: UserListCreationInput!): List
  addListToGroup(data: GroupListCreationInput!): List
  addUserToGroup(groupId: ID!, userId: ID!): User
  createGroup(data: GroupCreateInput!): Group
  createItem(data: IngredientCreationInput!): Item
  createUser(data: UserCreateInput!): User
  deleteGroup(data: GroupDeleteInput!): Group
  deleteUser(data: UserDeleteInput!): User
  removeItemFromList(data: RemoveItemFromListInput!): Item
  updateGroup(data: GroupUpdateInput!): Group
  updateUser(data: UserUpdateInput!): User
}

type Query {
  categories: [ItemCategory!]
  group(id: Int!): Group
  groups: [Group!]!
  items: [Item!]
  list(id: Int!): List
  lists: [List!]!
  listsFromUser(
    """Include the lists of the groups the user take part of."""
    includeGroupLists: Boolean! = false
    userId: Int!
  ): [List!]!
  user(id: Int!): User
  users: [User!]!
}

type Recipe {
  id: Int!
  name: String!
}

input RemoveItemFromListInput {
  itemId: Int!
  listId: Int!
}

type User {
  email: String
  groups: [Group!]!
  id: Int!
  lists: [List!]!
  recipes: [Recipe!]!
}

input UserCreateInput {
  email: String!
  password: String!
}

input UserDeleteInput {
  id: Int!
}

input UserListCreationInput {
  name: String!
  userId: Int!
}

input UserUpdateInput {
  email: String
  id: Int!
  password: String
}