### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Group {
  id: Int!
  lists: [List!]!
  name: String!
  users: [User!]!
}

input GroupListCreationInput {
  groupId: Int!
  name: String!
}

type Item {
  id: Int!
  list: List
  name: String!
}

type List {
  group: Group
  id: Int!
  items: [Item!]!
  name: String!
  user: User
}

type Mutation {
  addListForUser(data: UserListCreationInput!): List
  addListToGroup(data: GroupListCreationInput!): List
  addUserToGroup(groupId: ID!, userId: ID!): User
  createGroup(name: String!): Group
  createUser(data: UserCreateInput!): User
}

type Query {
  groups: [Group!]!
  lists: [List!]!
  listsFromUser(
    """Include the lists of the groups the user take part of."""
    includeGroupLists: Boolean! = false
    userId: Int!
  ): [List!]!
  user(id: Int!): User
  users: [User!]!
}

type Recipe {
  id: Int!
  name: String!
}

type User {
  email: String
  groups: [Group!]!
  id: Int!
  lists: [List!]!
  recipes: [Recipe!]!
}

input UserCreateInput {
  email: String!
  password: String!
}

input UserListCreationInput {
  name: String!
  userId: Int!
}