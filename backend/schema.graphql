### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Group {
  id: Int!
  lists: [List!]!
  name: String!
  users: [User!]!
}

input GroupCreateInput {
  name: String!
}

input GroupListCreationInput {
  groupId: Int!
  name: String!
}

input GroupUpdateInput {
  id: Int!
  name: String!
}

type Item {
  amount: Float!
  category: String
  description: String!
  iconUrl: String
  id: Int!
  list: List
  name: String!
}

enum ItemCategory {
  BABY_CARE
  BAKERY
  BEVERAGES
  CANNED_GOODS
  CLEANING_SUPPLIES
  DAIRY
  FROZEN_FOODS
  GROCERIES
  HEALTH_WELLNESS
  HOUSEHOLD_ITEMS
  MEAT_POULTRY
  NONE
  PERSONAL_CARE
  PET_SUPPLIES
  PRODUCE
  SNACKS
}

type List {
  group: Group
  id: Int!
  items: [Item!]!
  name: String!
  user: User
}

type Mutation {
  addListForUser(data: UserListCreationInput!): List
  addListToGroup(data: GroupListCreationInput!): List
  addUserToGroup(groupId: ID!, userId: ID!): User
  createGroup(data: GroupCreateInput!): Group
  createItem(category: ItemCategory! = NONE, name: String!): Item
  createUser(data: UserCreateInput!): User
  deleteUser(data: UserDeleteInput!): User
  updateGroup(data: GroupUpdateInput!): Group
  updateUser(data: UserUpdateInput!): User
}

type Query {
  categories: [String!]
  group(id: Int!): Group
  groups: [Group!]!
  lists: [List!]!
  listsFromUser(
    """Include the lists of the groups the user take part of."""
    includeGroupLists: Boolean! = false
    userId: Int!
  ): [List!]!
  user(id: Int!): User
  users: [User!]!
}

type Recipe {
  id: Int!
  name: String!
}

type User {
  email: String
  groups: [Group!]!
  id: Int!
  lists: [List!]!
  recipes: [Recipe!]!
}

input UserCreateInput {
  email: String!
  password: String!
}

input UserDeleteInput {
  id: Int!
}

input UserListCreationInput {
  name: String!
  userId: Int!
}

input UserUpdateInput {
  email: String
  id: Int!
  password: String
}