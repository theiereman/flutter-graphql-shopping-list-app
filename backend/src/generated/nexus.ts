/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  GroupListCreationInput: { // input type
    groupId: number; // Int!
    name: string; // String!
  }
  UserCreateInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  UserListCreationInput: { // input type
    name: string; // String!
    userId: number; // Int!
  }
}

export interface NexusGenEnums {
  ItemCategory: "BABY_CARE" | "BAKERY" | "BEVERAGES" | "CANNED_GOODS" | "CLEANING_SUPPLIES" | "DAIRY" | "FROZEN_FOODS" | "GROCERIES" | "HEALTH_WELLNESS" | "HOUSEHOLD_ITEMS" | "MEAT_POULTRY" | "NONE" | "PERSONAL_CARE" | "PET_SUPPLIES" | "PRODUCE" | "SNACKS"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Group: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Item: { // root type
    amount: number; // Float!
    category?: string | null; // String
    description: string; // String!
    iconUrl?: string | null; // String
    id: number; // Int!
    name: string; // String!
  }
  List: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Mutation: {};
  Query: {};
  Recipe: { // root type
    id: number; // Int!
    name: string; // String!
  }
  User: { // root type
    email?: string | null; // String
    id: number; // Int!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Group: { // field return type
    id: number; // Int!
    lists: NexusGenRootTypes['List'][]; // [List!]!
    name: string; // String!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Item: { // field return type
    amount: number; // Float!
    category: string | null; // String
    description: string; // String!
    iconUrl: string | null; // String
    id: number; // Int!
    list: NexusGenRootTypes['List'] | null; // List
    name: string; // String!
  }
  List: { // field return type
    group: NexusGenRootTypes['Group'] | null; // Group
    id: number; // Int!
    items: NexusGenRootTypes['Item'][]; // [Item!]!
    name: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: { // field return type
    addListForUser: NexusGenRootTypes['List'] | null; // List
    addListToGroup: NexusGenRootTypes['List'] | null; // List
    addUserToGroup: NexusGenRootTypes['User'] | null; // User
    createGroup: NexusGenRootTypes['Group'] | null; // Group
    createItem: NexusGenRootTypes['Item'] | null; // Item
    createUser: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    categories: string[] | null; // [String!]
    group: NexusGenRootTypes['Group'] | null; // Group
    groups: NexusGenRootTypes['Group'][]; // [Group!]!
    lists: NexusGenRootTypes['List'][]; // [List!]!
    listsFromUser: NexusGenRootTypes['List'][]; // [List!]!
    user: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Recipe: { // field return type
    id: number; // Int!
    name: string; // String!
  }
  User: { // field return type
    email: string | null; // String
    groups: NexusGenRootTypes['Group'][]; // [Group!]!
    id: number; // Int!
    lists: NexusGenRootTypes['List'][]; // [List!]!
    recipes: NexusGenRootTypes['Recipe'][]; // [Recipe!]!
  }
}

export interface NexusGenFieldTypeNames {
  Group: { // field return type name
    id: 'Int'
    lists: 'List'
    name: 'String'
    users: 'User'
  }
  Item: { // field return type name
    amount: 'Float'
    category: 'String'
    description: 'String'
    iconUrl: 'String'
    id: 'Int'
    list: 'List'
    name: 'String'
  }
  List: { // field return type name
    group: 'Group'
    id: 'Int'
    items: 'Item'
    name: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    addListForUser: 'List'
    addListToGroup: 'List'
    addUserToGroup: 'User'
    createGroup: 'Group'
    createItem: 'Item'
    createUser: 'User'
  }
  Query: { // field return type name
    categories: 'String'
    group: 'Group'
    groups: 'Group'
    lists: 'List'
    listsFromUser: 'List'
    user: 'User'
    users: 'User'
  }
  Recipe: { // field return type name
    id: 'Int'
    name: 'String'
  }
  User: { // field return type name
    email: 'String'
    groups: 'Group'
    id: 'Int'
    lists: 'List'
    recipes: 'Recipe'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addListForUser: { // args
      data: NexusGenInputs['UserListCreationInput']; // UserListCreationInput!
    }
    addListToGroup: { // args
      data: NexusGenInputs['GroupListCreationInput']; // GroupListCreationInput!
    }
    addUserToGroup: { // args
      groupId: string; // ID!
      userId: string; // ID!
    }
    createGroup: { // args
      name: string; // String!
    }
    createItem: { // args
      category: NexusGenEnums['ItemCategory']; // ItemCategory!
      name: string; // String!
    }
    createUser: { // args
      data: NexusGenInputs['UserCreateInput']; // UserCreateInput!
    }
  }
  Query: {
    group: { // args
      id: number; // Int!
    }
    listsFromUser: { // args
      includeGroupLists: boolean; // Boolean!
      userId: number; // Int!
    }
    user: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}